import json
from pathlib import Path
import pandas as pd
import ast

# =================================================

# TODO: test_order input from algorithm

# =================================================
test_order = [
    "test_file1.py::test_add",
    "test_file1.py::test_subtract",
    "test_file1.py::test_multiply",
    "test_file2.py::test_cube",
    "test_file3.py::test_factorial",
    "test_file4.py::test_is_palindrome",
]

def compute_apfd(n_tests, fault_detection_indices):
    coverage_matrix_path = Path("data/total_coverage_matrix.csv")
    df = pd.read_csv(coverage_matrix_path, index_col=0)

    fault_indices = []
    for col in df.columns:
        for rank, test_name in enumerate(test_order, start=1):
            if test_name in df.index and df.loc[test_name, col] == 1:
                fault_indices.append(rank)
                break

    n_tests = len(test_order)
    m = len(fault_detection_indices)

    sum_ranks = sum(fault_detection_indices) - m 
    apfd = 1 - (sum_ranks / (n_tests * m)) + (1 / (2 * n_tests))
    return apfd

# =================================================

# TODO: column name in coverage_matrix.csv need to change

# =================================================
def compute_change_coverage():
    # Get total change json file
    change_line_path = Path("data/coverage_db.json")
    with open(change_line_path) as f:
        changed_lines = json.load(f)

    # Get coverage matrix CSV
    coverage_matrix_path = Path("data/total_coverage_matrix.csv")
    df = pd.read_csv(coverage_matrix_path, index_col=0)

    covered_changed = 0
    total_changed = 0

    for filename, lines in changed_lines.items():
        for line in lines:
            key = f"{filename}:{line}"
            total_changed += 1
            if key in df.columns:

                # Check if the test cases cover this changed line
                if df[key].any():
                    covered_changed += 1

    if total_changed == 0:
        return 0.0
    return covered_changed / total_changed

# Get rumtine file generated by ci
def compute_execution_time():
    return float(Path(".runtime").read_text())

def count_test_functions_in_file(file_path):
    with open(file_path, "r") as f:
        tree = ast.parse(f.read(), filename=str(file_path))
    return sum(
        1
        for node in ast.walk(tree)
        if isinstance(node, ast.FunctionDef) and node.name.startswith("test_")
    )

# Count total test cases in the test directory
def compute_total_test_cases():
    test_dir = Path("tests")
    test_files = test_dir.glob("test_*.py")

    total_tests = 0
    for test_file in test_files:
        count = count_test_functions_in_file(test_file)
        total_tests += count

    return total_tests

if __name__ == "__main__":
    apfd = compute_apfd(n_tests=10, fault_detection_indices=[1, 2, 4])
    coverage = compute_change_coverage()
    time_taken = compute_execution_time()
    suite_size = compute_total_test_cases()

    print(f"APFD: {apfd:.2f}")
    print(f"Coverage of Changes: {coverage:.2f}")
    print(f"Execution Time: {time_taken:.2f} seconds")
    print(f"Test Suite Size: {suite_size} test cases")
